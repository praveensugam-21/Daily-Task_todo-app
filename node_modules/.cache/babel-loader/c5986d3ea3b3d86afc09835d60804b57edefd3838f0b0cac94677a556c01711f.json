{"ast":null,"code":"// Mock AI service for generating motivational messages\n// In a real application, this would call an actual AI API\n\nexport const generateMotivationalMessage = async tasks => {\n  // Simulate API delay\n  await new Promise(resolve => setTimeout(resolve, 1500 + Math.random() * 1000));\n\n  // Get yesterday's tasks\n  const yesterday = new Date();\n  yesterday.setDate(yesterday.getDate() - 1);\n  const yesterdayDate = yesterday.toISOString().split(\"T\")[0];\n  const yesterdayTasks = tasks.filter(task => task.date === yesterdayDate);\n  const completedYesterday = yesterdayTasks.filter(task => task.completed);\n  const totalYesterday = yesterdayTasks.length;\n\n  // Get today's tasks\n  const today = new Date().toISOString().split(\"T\")[0];\n  const todayTasks = tasks.filter(task => task.date === today);\n  const completedToday = todayTasks.filter(task => task.completed);\n  const totalToday = todayTasks.length;\n\n  // Generate motivational message based on performance\n  let message = \"\";\n  if (totalYesterday === 0) {\n    message = \"Welcome to your first day! 🎉 Every great journey starts with a single step. You've got this!\";\n  } else if (completedYesterday.length === totalYesterday && totalYesterday > 0) {\n    message = \"Incredible! You completed ALL your tasks yesterday! 🏆 That's the kind of consistency that builds success. Keep that momentum going today!\";\n  } else if (completedYesterday.length >= totalYesterday * 0.8) {\n    message = \"Outstanding work yesterday! You completed 80%+ of your tasks. That's excellent productivity! 💪 Today is another opportunity to shine.\";\n  } else if (completedYesterday.length >= totalYesterday * 0.5) {\n    message = \"Good progress yesterday! You completed more than half your tasks. Today is a fresh start - let's aim even higher! 🌟\";\n  } else if (completedYesterday.length > 0) {\n    message = \"You made some progress yesterday, and that's what matters! Every completed task is a victory. Today, let's build on that foundation! ✨\";\n  } else {\n    message = \"Yesterday was challenging, but today is a new opportunity! 💫 Every day brings fresh possibilities. Let's make today count!\";\n  }\n\n  // Add specific encouragement based on today's tasks\n  if (totalToday > 0) {\n    if (completedToday.length === totalToday) {\n      message += \" And look at you go - you've already completed all of today's tasks! You're on fire! 🔥\";\n    } else if (completedToday.length > 0) {\n      message += ` You've already completed ${completedToday.length} of ${totalToday} tasks today - keep up the great work!`;\n    } else {\n      message += ` You have ${totalToday} task${totalToday > 1 ? \"s\" : \"\"} planned for today. Let's tackle them one by one!`;\n    }\n  } else {\n    message += \" Take a moment to plan your day and add some tasks to get started!\";\n  }\n\n  // Add a random motivational quote\n  const quotes = [\"The only way to do great work is to love what you do. - Steve Jobs\", \"Success is not final, failure is not fatal: it is the courage to continue that counts. - Winston Churchill\", \"The future depends on what you do today. - Mahatma Gandhi\", \"Don't watch the clock; do what it does. Keep going. - Sam Levenson\", \"The only limit to our realization of tomorrow is our doubts of today. - Franklin D. Roosevelt\"];\n  const randomQuote = quotes[Math.floor(Math.random() * quotes.length)];\n  message += `\\n\\n\"${randomQuote}\"`;\n  return message;\n};\n\n// For development/testing purposes, you can also use this simpler version\nexport const generateSimpleMessage = async tasks => {\n  await new Promise(resolve => setTimeout(resolve, 500));\n  const today = new Date().toISOString().split(\"T\")[0];\n  const todayTasks = tasks.filter(task => task.date === today);\n  const completed = todayTasks.filter(task => task.completed).length;\n  const total = todayTasks.length;\n  if (total === 0) {\n    return \"Welcome! Add some tasks to get started on your productive journey! 🚀\";\n  } else if (completed === total) {\n    return \"Amazing! You've completed all your tasks for today! 🎉 Keep up the excellent work!\";\n  } else {\n    return `Great progress! You've completed ${completed} of ${total} tasks today. Keep going! 💪`;\n  }\n};","map":{"version":3,"names":["generateMotivationalMessage","tasks","Promise","resolve","setTimeout","Math","random","yesterday","Date","setDate","getDate","yesterdayDate","toISOString","split","yesterdayTasks","filter","task","date","completedYesterday","completed","totalYesterday","length","today","todayTasks","completedToday","totalToday","message","quotes","randomQuote","floor","generateSimpleMessage","total"],"sources":["E:/Infogerm/src/utils/aiService.js"],"sourcesContent":["// Mock AI service for generating motivational messages\r\n// In a real application, this would call an actual AI API\r\n\r\nexport const generateMotivationalMessage = async (tasks) => {\r\n  // Simulate API delay\r\n  await new Promise((resolve) =>\r\n    setTimeout(resolve, 1500 + Math.random() * 1000)\r\n  );\r\n\r\n  // Get yesterday's tasks\r\n  const yesterday = new Date();\r\n  yesterday.setDate(yesterday.getDate() - 1);\r\n  const yesterdayDate = yesterday.toISOString().split(\"T\")[0];\r\n\r\n  const yesterdayTasks = tasks.filter((task) => task.date === yesterdayDate);\r\n  const completedYesterday = yesterdayTasks.filter((task) => task.completed);\r\n  const totalYesterday = yesterdayTasks.length;\r\n\r\n  // Get today's tasks\r\n  const today = new Date().toISOString().split(\"T\")[0];\r\n  const todayTasks = tasks.filter((task) => task.date === today);\r\n  const completedToday = todayTasks.filter((task) => task.completed);\r\n  const totalToday = todayTasks.length;\r\n\r\n  // Generate motivational message based on performance\r\n  let message = \"\";\r\n\r\n  if (totalYesterday === 0) {\r\n    message =\r\n      \"Welcome to your first day! 🎉 Every great journey starts with a single step. You've got this!\";\r\n  } else if (\r\n    completedYesterday.length === totalYesterday &&\r\n    totalYesterday > 0\r\n  ) {\r\n    message =\r\n      \"Incredible! You completed ALL your tasks yesterday! 🏆 That's the kind of consistency that builds success. Keep that momentum going today!\";\r\n  } else if (completedYesterday.length >= totalYesterday * 0.8) {\r\n    message =\r\n      \"Outstanding work yesterday! You completed 80%+ of your tasks. That's excellent productivity! 💪 Today is another opportunity to shine.\";\r\n  } else if (completedYesterday.length >= totalYesterday * 0.5) {\r\n    message =\r\n      \"Good progress yesterday! You completed more than half your tasks. Today is a fresh start - let's aim even higher! 🌟\";\r\n  } else if (completedYesterday.length > 0) {\r\n    message =\r\n      \"You made some progress yesterday, and that's what matters! Every completed task is a victory. Today, let's build on that foundation! ✨\";\r\n  } else {\r\n    message =\r\n      \"Yesterday was challenging, but today is a new opportunity! 💫 Every day brings fresh possibilities. Let's make today count!\";\r\n  }\r\n\r\n  // Add specific encouragement based on today's tasks\r\n  if (totalToday > 0) {\r\n    if (completedToday.length === totalToday) {\r\n      message +=\r\n        \" And look at you go - you've already completed all of today's tasks! You're on fire! 🔥\";\r\n    } else if (completedToday.length > 0) {\r\n      message += ` You've already completed ${completedToday.length} of ${totalToday} tasks today - keep up the great work!`;\r\n    } else {\r\n      message += ` You have ${totalToday} task${\r\n        totalToday > 1 ? \"s\" : \"\"\r\n      } planned for today. Let's tackle them one by one!`;\r\n    }\r\n  } else {\r\n    message +=\r\n      \" Take a moment to plan your day and add some tasks to get started!\";\r\n  }\r\n\r\n  // Add a random motivational quote\r\n  const quotes = [\r\n    \"The only way to do great work is to love what you do. - Steve Jobs\",\r\n    \"Success is not final, failure is not fatal: it is the courage to continue that counts. - Winston Churchill\",\r\n    \"The future depends on what you do today. - Mahatma Gandhi\",\r\n    \"Don't watch the clock; do what it does. Keep going. - Sam Levenson\",\r\n    \"The only limit to our realization of tomorrow is our doubts of today. - Franklin D. Roosevelt\",\r\n  ];\r\n\r\n  const randomQuote = quotes[Math.floor(Math.random() * quotes.length)];\r\n  message += `\\n\\n\"${randomQuote}\"`;\r\n\r\n  return message;\r\n};\r\n\r\n// For development/testing purposes, you can also use this simpler version\r\nexport const generateSimpleMessage = async (tasks) => {\r\n  await new Promise((resolve) => setTimeout(resolve, 500));\r\n\r\n  const today = new Date().toISOString().split(\"T\")[0];\r\n  const todayTasks = tasks.filter((task) => task.date === today);\r\n  const completed = todayTasks.filter((task) => task.completed).length;\r\n  const total = todayTasks.length;\r\n\r\n  if (total === 0) {\r\n    return \"Welcome! Add some tasks to get started on your productive journey! 🚀\";\r\n  } else if (completed === total) {\r\n    return \"Amazing! You've completed all your tasks for today! 🎉 Keep up the excellent work!\";\r\n  } else {\r\n    return `Great progress! You've completed ${completed} of ${total} tasks today. Keep going! 💪`;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}